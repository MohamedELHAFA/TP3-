#!/usr/bin/env python3
"""
Smart City Waste Management Dashboard - Version Interactive
Dashboard Streamlit avanc√© avec fonctionnalit√©s de prise de d√©cision
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import boto3
import io
from datetime import datetime, timedelta
import time
from botocore.client import Config
import math
from geopy.distance import geodesic
import openrouteservice

# Configuration de la page
st.set_page_config(
    page_title="Smart Waste Management Paris",
    page_icon="üóëÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

ORS_API_KEY = "eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6IjNkODlhODg2ZjI4MDQwNDZhMTg4NzM1MDcxNjQ4ZWQyIiwiaCI6Im11cm11cjY0In0="  # üîí Remplace par ta cl√©

ors_client = openrouteservice.Client(key=ORS_API_KEY)

# Configuration S3/MinIO
@st.cache_resource
def init_s3_client():
    return boto3.client(
        's3',
        endpoint_url='http://localhost:9000',
        aws_access_key_id='minioadmin',
        aws_secret_access_key='minioadmin123',
        config=Config(signature_version='s3v4')
    )

s3 = init_s3_client()

# Variables de session pour l'interactivit√©
if 'selected_sensors' not in st.session_state:
    st.session_state.selected_sensors = []
if 'planned_route' not in st.session_state:
    st.session_state.planned_route = []
if 'route_geometries' not in st.session_state:
    st.session_state.route_geometries = []
if 'alert_threshold' not in st.session_state:
    st.session_state.alert_threshold = 80
if 'view_mode' not in st.session_state:
    st.session_state.view_mode = 'all'
if 'last_action' not in st.session_state:
    st.session_state.last_action = None
if 'awaiting_confirmation' not in st.session_state:
    st.session_state.awaiting_confirmation = False
if 'confirmation_details' not in st.session_state:
    st.session_state.confirmation_details = None
if 'route_calculated' not in st.session_state:
    st.session_state.route_calculated = False

# Fonctions de chargement des donn√©es
@st.cache_data(ttl=30)
def load_sensor_current_data():
    """Charge les niveaux actuels des capteurs depuis Gold"""
    try:
        obj = s3.get_object(Bucket='gold', Key='sensor/sensor_data.txt')
        fill_levels = [int(x.strip()) for x in obj['Body'].read().decode('utf-8').splitlines()]
        return fill_levels
    except Exception as e:
        st.error(f"Erreur chargement niveaux actuels: {e}")
        return []

@st.cache_data(ttl=60)
def load_sensor_positions():
    """Charge les positions des capteurs depuis Silver"""
    try:
        obj = s3.get_object(Bucket='silver', Key='sensors/positions.parquet')
        df_positions = pd.read_parquet(io.BytesIO(obj['Body'].read()))
        return df_positions
    except Exception as e:
        st.error(f"Erreur chargement positions: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def load_historic_data():
    """Charge l'historique des niveaux depuis Silver"""
    try:
        obj = s3.get_object(Bucket='silver', Key='sensors/historic_fill.parquet')
        df_historic = pd.read_parquet(io.BytesIO(obj['Body'].read()))
        if 'timestamp' in df_historic.columns:
            df_historic['ts'] = pd.to_datetime(df_historic['timestamp'], unit='ms')
        return df_historic
    except Exception as e:
        st.error(f"Erreur chargement historique: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=300)
def load_tonnage_data():
    """Charge les donn√©es de tonnage depuis Silver"""
    try:
        obj = s3.get_object(Bucket='silver', Key='sensor_tonnage/proxy.parquet')
        df_tonnage = pd.read_parquet(io.BytesIO(obj['Body'].read()))
        return df_tonnage
    except Exception as e:
        return pd.DataFrame()

@st.cache_data(ttl=60)
def load_model_metrics():
    """Charge les m√©triques du mod√®le ML depuis Gold"""
    try:
        paginator = s3.get_paginator('list_objects_v2')
        objects = []
        for page in paginator.paginate(Bucket='gold', Prefix='metrics/'):
            objects.extend(page.get('Contents', []))
        
        if not objects:
            return None
            
        latest = max(objects, key=lambda x: x['LastModified'])
        obj = s3.get_object(Bucket='gold', Key=latest['Key'])
        metrics = json.loads(obj['Body'].read().decode('utf-8'))
        return metrics
    except Exception as e:
        return None

# Fonctions d'optimisation et de calcul
import requests

def get_real_route_distance(start_coords, end_coords):
    """Calcule distance et dur√©e de conduite r√©elle entre deux points via OpenRouteService"""
    try:
        route = ors_client.directions(
            coordinates=[(start_coords[1], start_coords[0]), (end_coords[1], end_coords[0])],
            profile='driving-car',
            format='geojson'
        )
        
        geometry = route['features'][0]['geometry']['coordinates']
        distance_km = route['features'][0]['properties']['segments'][0]['distance'] / 1000  # m ‚Üí km
        duration_min = route['features'][0]['properties']['segments'][0]['duration'] / 60  # sec ‚Üí min
        
        return {
            'distance_km': distance_km,
            'duration_min': duration_min,
            'geometry': geometry,
            'success': True
        }
    except Exception as e:
        print(f"Erreur ORS: {e}")
        # Fallback g√©od√©sique
        distance_km = geodesic(start_coords, end_coords).kilometers * 1.3
        duration_min = (distance_km / 20) * 60
        return {
            'distance_km': distance_km,
            'duration_min': duration_min,
            'geometry': [],
            'success': False
        }

def calculate_route_optimization(priority_sensors, df_positions, depot_lat=48.8566, depot_lon=2.3522):
    """Calcule un parcours optimis√© avec distances routi√®res am√©lior√©es"""
    if not priority_sensors:
        return [], 0, 0, []
    
    # R√©cup√©rer les positions des capteurs prioritaires
    route_points = []
    for sensor_id in priority_sensors:
        sensor_data = df_positions[df_positions['sensor_id'] == sensor_id]
        if not sensor_data.empty:
            route_points.append({
                'sensor_id': sensor_id,
                'lat': sensor_data.iloc[0]['lat'],
                'lon': sensor_data.iloc[0]['lon']
            })
    
    if not route_points:
        return [], 0, 0, []
    
    # Algorithme glouton avec vraies distances routi√®res
    unvisited = route_points.copy()
    route = []
    current_pos = (depot_lat, depot_lon)
    total_distance = 0
    total_time = 0
    route_geometries = []
    
    # Progress bar dans un container pour √©viter qu'elle disparaisse
    progress_container = st.empty()
    progress_bar = progress_container.progress(0)
    
    step = 0
    total_steps = len(route_points) + 1  # +1 pour le retour au d√©p√¥t
    
    while unvisited:
        # Calculer les vraies distances routi√®res vers tous les points non visit√©s
        real_distances = []
        for point in unvisited:
            route_info = get_real_route_distance(current_pos, (point['lat'], point['lon']))
            real_distances.append({
                'distance': route_info['distance_km'],
                'duration': route_info['duration_min'],
                'geometry': route_info['geometry'],
                'api_success': route_info['success'],
                'point': point
            })
        
        # Trouver le point le plus proche selon la vraie distance
        closest = min(real_distances, key=lambda x: x['distance'])
        closest_point = closest['point']
        
        # Ajouter √† la route
        route.append({
            **closest_point,
            'real_distance': closest['distance'],
        'real_duration': closest['duration'],
        'api_used': closest['api_success'],
        'geometry': closest['geometry']
        })
        
        # Mettre √† jour les totaux
        total_distance += closest['distance']
        total_time += closest['duration']
        
        # Retirer le point visit√© et mettre √† jour la position
        unvisited.remove(closest_point)
        current_pos = (closest_point['lat'], closest_point['lon'])
        
        # Mettre √† jour la barre de progression
        step += 1
        progress_bar.progress(step / total_steps)
    
    # Calculer le retour au d√©p√¥t
    return_info = get_real_route_distance(current_pos, (depot_lat, depot_lon))
    total_distance += return_info['distance_km']
    total_time += return_info['duration_min']
    
    # Finaliser la barre de progression
    progress_bar.progress(1.0)
    
    # Nettoyer la barre de progression apr√®s un d√©lai
    import time
    time.sleep(1)
    progress_container.empty()
    
    # Ajouter le temps de collecte (5 min par capteur)
    collection_time = len(route) * 5
    total_time += collection_time
    
    return route, total_distance, total_time, route_geometries

def predict_next_collection_time(sensor_id, df_historic, current_level):
    """Pr√©dit quand un capteur sera plein"""
    if df_historic.empty:
        return "Donn√©es insuffisantes"
    
    # Filtrer les donn√©es du capteur
    sensor_data = df_historic[df_historic['sensor_id'] == sensor_id].sort_values('ts')
    
    if len(sensor_data) < 5:
        return "Donn√©es insuffisantes"
    
    # Calculer le taux de remplissage moyen (sur les 24 derni√®res heures)
    recent_data = sensor_data.tail(12)  # 12 derni√®res mesures
    if len(recent_data) < 2:
        return "Donn√©es insuffisantes"
    
    fill_rates = []
    for i in range(1, len(recent_data)):
        time_diff = (recent_data.iloc[i]['ts'] - recent_data.iloc[i-1]['ts']).total_seconds() / 3600
        level_diff = recent_data.iloc[i]['fill_level'] - recent_data.iloc[i-1]['fill_level']
        if time_diff > 0 and level_diff > 0:  # Seulement si le niveau augmente
            fill_rates.append(level_diff / time_diff)
    
    if not fill_rates:
        return "Tendance stable"
    
    avg_fill_rate = np.mean(fill_rates)  # % par heure
    if avg_fill_rate <= 0:
        return "Tendance stable"
    
    # Calculer le temps pour atteindre 95%
    remaining_capacity = 95 - (current_level * 100)
    if remaining_capacity <= 0:
        return "URGENT - D√©j√† plein!"
    
    hours_to_full = remaining_capacity / (avg_fill_rate * 100)
    
    if hours_to_full < 6:
        return f"üî¥ {hours_to_full:.1f}h"
    elif hours_to_full < 24:
        return f"üü° {hours_to_full:.1f}h"
    else:
        return f"üü¢ {hours_to_full/24:.1f}j"

def generate_operational_recommendations(fill_levels, df_positions, df_tonnage):
    """G√©n√®re des recommandations op√©rationnelles intelligentes"""
    recommendations = []
    
    urgent_count = sum(1 for x in fill_levels if x >= 85)
    warning_count = sum(1 for x in fill_levels if 70 <= x < 85)
    
    # Recommandations bas√©es sur les niveaux
    if urgent_count > 0:
        recommendations.append({
            'type': 'URGENT',
            'title': f'Collecte imm√©diate requise',
            'description': f'{urgent_count} capteur(s) ‚â•85%. Risque de d√©bordement.',
            'action': 'D√©ployer √©quipe de collecte prioritaire',
            'priority': 1
        })
    
    if warning_count >= 5:
        recommendations.append({
            'type': 'WARNING',
            'title': 'Planifier collecte pr√©ventive',
            'description': f'{warning_count} capteurs approchent de la saturation',
            'action': 'Programmer tourn√©e dans les 4-6h',
            'priority': 2
        })
    
    # Recommandations bas√©es sur l'efficacit√©
    if urgent_count + warning_count >= 8:
        recommendations.append({
            'type': 'EFFICIENCY',
            'title': 'Optimiser avec camion suppl√©mentaire',
            'description': 'Volume √©lev√© justifie une 2√®me √©quipe',
            'action': 'Activer protocole multi-√©quipes',
            'priority': 2
        })
    
    # Recommandations bas√©es sur les patterns
    current_hour = datetime.now().hour
    if current_hour >= 6 and current_hour <= 10 and warning_count > 2:
        recommendations.append({
            'type': 'TIMING',
            'title': 'Fen√™tre optimale de collecte',
            'description': 'P√©riode matinale id√©ale (trafic r√©duit)',
            'action': 'Prioriser collecte maintenant',
            'priority': 2
        })
    
    return sorted(recommendations, key=lambda x: x['priority'])

# Fonctions de visualisation avanc√©es
def create_interactive_map(fill_levels, df_positions, selected_sensors=None, planned_route=None, route_geometries=None, view_mode='all', alert_threshold=80):
    """Cr√©e la carte interactive avec s√©lection et routes simplifi√©es"""
    fig = go.Figure()
    
    if df_positions.empty:
        return fig
    
    # Filtrage selon le mode de vue
    if view_mode == 'urgent_only':
        visible_indices = [i for i, level in enumerate(fill_levels) if level >= alert_threshold]
    elif view_mode == 'planned_route':
        selected_ids = selected_sensors or []
        visible_indices = [i for i, row in df_positions.iterrows() if row['sensor_id'] in selected_ids]
    else:  # 'all'
        visible_indices = list(range(len(fill_levels)))
    
    # Pr√©parer les donn√©es des capteurs visibles
    sensor_data = []
    for i in visible_indices:
        if i < len(df_positions):
            row = df_positions.iloc[i]
            fill_level = fill_levels[i] if i < len(fill_levels) else 50
            status = "üî¥ URGENT" if fill_level >= 85 else "üü° ATTENTION" if fill_level >= alert_threshold else "üü¢ OK"
            
            sensor_data.append({
                'lat': row['lat'],
                'lon': row['lon'],
                'sensor_id': row['sensor_id'],
                'fill_level': fill_level,
                'status': status,
                'capacity': row['capacity_tons'],
                'selected': row['sensor_id'] in (selected_sensors or []),
                'index': i
            })
    
    if not sensor_data:
        st.warning(f"Aucun capteur √† afficher pour le mode '{view_mode}' avec seuil {alert_threshold}%")
        return fig
    
    df_sensors = pd.DataFrame(sensor_data)
    
    # Capteurs normaux (non s√©lectionn√©s)
    normal_sensors = df_sensors[~df_sensors['selected']]
    if not normal_sensors.empty:
        colors_normal = normal_sensors['fill_level'].apply(
            lambda x: 'red' if x >= 85 else 'orange' if x >= alert_threshold else 'green'
        )
        
        fig.add_trace(go.Scattermapbox(
            lat=normal_sensors['lat'],
            lon=normal_sensors['lon'],
            mode='markers',
            marker=dict(
                size=12,
                color=colors_normal,
                opacity=0.8,
                symbol='circle'
            ),
            text=normal_sensors.apply(lambda row: 
                f"<b>{row['sensor_id']}</b><br>"
                f"Niveau: {row['fill_level']}%<br>"
                f"Status: {row['status']}<br>"
                f"üìç Cliquer pour s√©lectionner", axis=1),
            hovertemplate='%{text}<extra></extra>',
            name='Capteurs',
            customdata=normal_sensors['sensor_id']
        ))
    
    # Capteurs s√©lectionn√©s (plus visibles)
    selected_sensors_df = df_sensors[df_sensors['selected']]
    if not selected_sensors_df.empty:
        # Cercle blanc en arri√®re-plan pour l'effet de bordure
        fig.add_trace(go.Scattermapbox(
            lat=selected_sensors_df['lat'],
            lon=selected_sensors_df['lon'],
            mode='markers',
            marker=dict(
                size=22,
                color='white',
                opacity=0.9,
                symbol='circle'
            ),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        # Capteur s√©lectionn√© par-dessus
        fig.add_trace(go.Scattermapbox(
            lat=selected_sensors_df['lat'],
            lon=selected_sensors_df['lon'],
            mode='markers',
            marker=dict(
                size=16,
                color='purple',
                opacity=1.0,
                symbol='circle'
            ),
            text=selected_sensors_df.apply(lambda row: 
                f"<b>‚úì {row['sensor_id']} S√âLECTIONN√â</b><br>"
                f"Niveau: {row['fill_level']}%<br>"
                f"Status: {row['status']}<br>"
                f"üóëÔ∏è Cliquer pour d√©s√©lectionner", axis=1),
            hovertemplate='%{text}<extra></extra>',
            name='S√©lectionn√©s',
            customdata=selected_sensors_df['sensor_id']
        ))
    
    # Parcours planifi√© avec lignes directes (simplifi√©es)
    if planned_route and len(planned_route) > 1:
        # Debug : v√©rifier les donn√©es de la route
        st.write(f"üêõ DEBUG: planned_route contient {len(planned_route)} points")
        for i, point in enumerate(planned_route[:3]):  # Afficher les 3 premiers points pour debug
            st.write(f"   Point {i+1}: {point.get('sensor_id', 'NO_ID')} - Lat: {point.get('lat', 'NO_LAT')}, Lon: {point.get('lon', 'NO_LON')}")
        
        # Ajouter le d√©p√¥t au d√©but et √† la fin de la route pour affichage
        depot_point = {'lat': 48.8566, 'lon': 2.3522, 'sensor_id': 'D√âP√îT'}
        full_route = [depot_point] + planned_route + [depot_point]
        
        route_lats = [point['lat'] for point in full_route]
        route_lons = [point['lon'] for point in full_route]
        
        st.write(f"üêõ DEBUG: Route compl√®te avec d√©p√¥t: {len(full_route)} points")
        st.write(f"   Latitudes: {route_lats[:5]}...")
        st.write(f"   Longitudes: {route_lons[:5]}...")
        
    # Trac√© des vraies g√©om√©tries de la route
    for point_idx in range(len(planned_route) - 1):
        segment_geom = planned_route[point_idx].get('geometry', [])
        if segment_geom:
            lons, lats = zip(*segment_geom)
            fig.add_trace(go.Scattermapbox(
                lat=lats,
                lon=lons,
                mode='lines',
                line=dict(width=4, color='blue'),
                name=f"Segment {point_idx + 1}",
                hoverinfo='skip',
                showlegend=False
            ))

    # Points de collecte avec num√©rotation (sans le d√©p√¥t pour la num√©rotation)
    for i, point in enumerate(planned_route):
        fig.add_trace(go.Scattermapbox(
            lat=[point['lat']],
            lon=[point['lon']],
            mode='markers+text',
            marker=dict(size=16, color='blue', symbol='circle'),
            text=[str(i+1)],
            textfont=dict(size=12, color='white'),
            showlegend=False,
            hovertemplate=f'<b>√âtape {i+1}: {point["sensor_id"]}</b><br>' + 
                        (f'Distance r√©elle: {point.get("real_distance", 0):.1f}km<br>' if point.get("api_used") else 'Distance estim√©e<br>') +
                        f'Dur√©e: {point.get("real_duration", 0):.0f}min<extra></extra>',
            name='√âtapes'
        ))

    # Point de d√©part/arriv√©e (d√©p√¥t)
    depot_point = {'lat': 48.8566, 'lon': 2.3522, 'sensor_id': 'D√âP√îT'}
    fig.add_trace(go.Scattermapbox(
        lat=[depot_point['lat']],
        lon=[depot_point['lon']],
        mode='markers+text',
        marker=dict(size=20, color='green', symbol='star'),
        text=['üè†'],
        textfont=dict(size=16),
        name='D√©p√¥t',
        showlegend=True,
        hovertemplate='<b>D√âP√îT DE D√âPART/RETOUR</b><extra></extra>'
    ))

    # Configuration de la carte
    center_lat = np.mean([s['lat'] for s in sensor_data]) if sensor_data else 48.8566
    center_lon = np.mean([s['lon'] for s in sensor_data]) if sensor_data else 2.3522

    fig.update_layout(
        mapbox=dict(
            style="open-street-map",
            center=dict(lat=center_lat, lon=center_lon),
            zoom=12 if len(sensor_data) > 10 else 13
        ),
        height=600,
        margin=dict(l=0, r=0, t=0, b=0),
        showlegend=True,
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01,
            bgcolor="rgba(255,255,255,0.8)"
        )
    )

    return fig


def create_decision_metrics(fill_levels, df_positions, df_tonnage):
    """Cr√©e les m√©triques cl√©s pour la prise de d√©cision"""
    urgent_sensors = [i for i, level in enumerate(fill_levels) if level >= 85]
    warning_sensors = [i for i, level in enumerate(fill_levels) if 70 <= level < 85]
    
    # Calculs de capacit√©
    total_capacity = len(fill_levels) * 0.12  # tonnes
    current_waste = sum(fill_levels) * 0.12 / 100
    available_capacity = total_capacity - current_waste
    
    # Estimation revenus perdus si d√©bordement
    if not df_tonnage.empty:
        avg_daily_tonnage = df_tonnage['daily_tons'].mean()
        potential_loss = len(urgent_sensors) * avg_daily_tonnage * 50  # 50‚Ç¨/tonne estim√©
    else:
        potential_loss = len(urgent_sensors) * 25  # Estimation conservative
    
    # Temps optimal restant
    avg_urgent_level = np.mean([fill_levels[i] for i in urgent_sensors]) if urgent_sensors else 0
    time_to_overflow = max(0, (100 - avg_urgent_level) / 5)  # 5% par heure estim√©
    
    return {
        'urgent_count': len(urgent_sensors),
        'warning_count': len(warning_sensors),
        'capacity_used': (current_waste / total_capacity) * 100,
        'potential_loss': potential_loss,
        'time_to_overflow': time_to_overflow,
        'total_capacity': total_capacity,
        'available_capacity': available_capacity
    }

def create_sensor_details_panel(sensor_id, fill_levels, df_positions, df_historic):
    """Panneau de d√©tails pour un capteur s√©lectionn√©"""
    sensor_idx = int(sensor_id[1:]) - 1
    if sensor_idx >= len(fill_levels):
        return
    
    current_level = fill_levels[sensor_idx]
    sensor_pos = df_positions[df_positions['sensor_id'] == sensor_id].iloc[0]
    
    st.subheader(f"üìä D√©tails - {sensor_id}")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Niveau Actuel", f"{current_level}%")
    with col2:
        capacity_kg = current_level * 1.2  # 120L = 120kg approximativement
        st.metric("Contenu", f"{capacity_kg:.1f} kg")
    with col3:
        status = "üî¥ URGENT" if current_level >= 85 else "üü° ATTENTION" if current_level >= 70 else "üü¢ OK"
        st.metric("Status", status)
    
    # Pr√©diction
    prediction = predict_next_collection_time(sensor_id, df_historic, current_level/100)
    st.info(f"‚è∞ **Temps avant saturation:** {prediction}")
    
    # Position
    st.write(f"üìç **Position:** {sensor_pos['lat']:.6f}, {sensor_pos['lon']:.6f}")
    
    # Historique r√©cent du capteur
    if not df_historic.empty:
        sensor_history = df_historic[df_historic['sensor_id'] == sensor_id].tail(20)
        if not sensor_history.empty:
            fig_trend = px.line(
                sensor_history, 
                x='ts', 
                y='fill_level',
                title=f"√âvolution r√©cente - {sensor_id}",
                labels={'ts': 'Temps', 'fill_level': 'Niveau'}
            )
            fig_trend.update_layout(height=250)
            st.plotly_chart(fig_trend, use_container_width=True)

# Interface principale
def main():
    # En-t√™te avec statut temps r√©el
    col1, col2 = st.columns([3, 1])
    with col1:
        st.title("üóëÔ∏è Smart Waste Management - Paris")
        st.markdown("**Dashboard Interactif de Gestion Intelligente**")
    
    with col2:
        # Indicateur temps r√©el
        current_time = datetime.now().strftime('%H:%M:%S')
        st.metric("üïê Temps R√©el", current_time)
    
    # Chargement des donn√©es EN PREMIER (avant sidebar)
    with st.spinner("‚è≥ Chargement des donn√©es en temps r√©el..."):
        fill_levels = load_sensor_current_data()
        df_positions = load_sensor_positions()
        df_historic = load_historic_data()
        df_tonnage = load_tonnage_data()
        metrics = load_model_metrics()
    
    if not fill_levels or df_positions.empty:
        st.error("‚ùå Impossible de charger les donn√©es principales.")
        return
    
    # R√©cup√©ration des variables de session avec valeurs par d√©faut
    view_mode = st.session_state.view_mode
    alert_threshold = st.session_state.alert_threshold
    
    # Sidebar avec contr√¥les avanc√©s (apr√®s chargement des donn√©es)
    with st.sidebar:
        st.header("‚öôÔ∏è Centre de Contr√¥le")
        
        # Mode de vue avec feedback
        st.subheader("üëÅÔ∏è Mode d'Affichage")
        new_view_mode = st.selectbox(
            "Choisir la vue:",
            ['all', 'urgent_only', 'planned_route'],
            format_func=lambda x: {
                'all': 'üåç Vue compl√®te - Tous les capteurs',
                'urgent_only': 'üö® Urgences seulement - Focus priorit√©',
                'planned_route': 'üöõ Parcours planifi√© - Trajet optimis√©'
            }[x],
            index=['all', 'urgent_only', 'planned_route'].index(view_mode),
            key="view_mode_select"
        )
        
        # Mettre √† jour le mode si chang√©
        if new_view_mode != view_mode:
            st.session_state.view_mode = new_view_mode
            view_mode = new_view_mode  # Mettre √† jour la variable locale aussi
            st.rerun()
        
        # Feedback sur le mode actuel
        if view_mode == 'urgent_only':
            urgent_count = sum(1 for level in fill_levels if level >= alert_threshold)
            st.info(f"üéØ Mode actif: {urgent_count} capteurs ‚â•{alert_threshold}%")
        elif view_mode == 'planned_route':
            if st.session_state.planned_route:
                st.success(f"üöõ Parcours actif: {len(st.session_state.planned_route)} √©tapes")
            else:
                st.warning("‚ö†Ô∏è Aucun parcours planifi√©")
        else:
            st.success(f"üåç Vue compl√®te: {len(fill_levels)} capteurs")
        
        # Seuil d'alerte personnalisable avec feedback
        st.subheader("üîî Seuils d'Alerte")
        new_alert_threshold = st.slider(
            "Seuil d'alerte personnalis√© (%)", 
            50, 95, 
            alert_threshold,
            help="D√©finit le niveau √† partir duquel un capteur est consid√©r√© en attention",
            key="alert_threshold_slider"
        )
        
        # Mettre √† jour si chang√©
        if new_alert_threshold != alert_threshold:
            st.session_state.alert_threshold = new_alert_threshold
            alert_threshold = new_alert_threshold  # Mettre √† jour la variable locale aussi
            # Compter les capteurs concern√©s
            affected_count = sum(1 for level in fill_levels if level >= alert_threshold)
            st.info(f"üîÑ Seuil mis √† jour: {affected_count} capteurs ‚â•{alert_threshold}%")
            st.rerun()
        
        # Indicateurs visuels du seuil
        current_threshold_count = sum(1 for level in fill_levels if level >= alert_threshold)
        urgent_count = sum(1 for level in fill_levels if level >= 85)
        
        col_thresh1, col_thresh2 = st.columns(2)
        with col_thresh1:
            st.metric(f"‚â•{alert_threshold}%", current_threshold_count, delta="√Ä surveiller")
        with col_thresh2:
            st.metric("‚â•85%", urgent_count, delta="Urgents")
        
        st.markdown("---")
        
        # Actions rapides avec compteurs en temps r√©el
        st.subheader("‚ö° Actions Rapides")
        
        # Mise √† jour des compteurs
        urgent_sensors_count = sum(1 for level in fill_levels if level >= 85)
        warning_sensors_count = sum(1 for level in fill_levels if alert_threshold <= level < 85)
        selected_count = len(st.session_state.selected_sensors)
        
        if st.button(f"üö® Mode Urgence ({urgent_sensors_count})", 
                    disabled=urgent_sensors_count == 0,
                    key="emergency_mode"):
            st.session_state.view_mode = 'urgent_only'
            urgent_sensors = [df_positions.iloc[i]['sensor_id'] for i, level in enumerate(fill_levels) if level >= 85]
            st.session_state.selected_sensors = urgent_sensors
            st.success(f"üö® Mode urgence activ√©! {len(urgent_sensors)} capteurs s√©lectionn√©s")
            st.rerun()
        
        if st.button(f"üóëÔ∏è Vider S√©lection ({selected_count})",
                    disabled=selected_count == 0,
                    key="clear_all"):
            st.session_state.selected_sensors = []
            st.session_state.planned_route = []
            st.session_state.route_geometries = []
            st.session_state.view_mode = 'all'
            st.success("üßπ S√©lection vid√©e")
            st.rerun()
        
        if st.button(f"üîÑ Actualiser Donn√©es",
                    key="refresh_data"):
            st.cache_data.clear()
            st.success("üîÑ Donn√©es actualis√©es")
            st.rerun()
        
        # Statistiques en temps r√©el dans le sidebar
        st.markdown("---")
        st.subheader("üìä Statistiques Live")
        
        total_sensors = len(fill_levels)
        ok_sensors = total_sensors - urgent_sensors_count - warning_sensors_count
        avg_level = np.mean(fill_levels) if fill_levels else 0
        
        # Jauges compactes
        st.metric("üü¢ OK", ok_sensors, delta=f"{(ok_sensors/total_sensors)*100:.0f}%")
        st.metric("üü° Attention", warning_sensors_count, delta=f"{(warning_sensors_count/total_sensors)*100:.0f}%")
        st.metric("üî¥ Urgents", urgent_sensors_count, delta=f"{(urgent_sensors_count/total_sensors)*100:.0f}%")
        st.metric("üìä Niveau Moyen", f"{avg_level:.1f}%")
        
        # Tendance (simulation)
        if avg_level > 60:
            st.warning("üìà Tendance: Augmentation")
        elif avg_level < 40:
            st.success("üìâ Tendance: Stable")
        else:
            st.info("üìä Tendance: Normale")
        
        # Auto-refresh avec countdown
        st.markdown("---")
        st.subheader("üîÑ Actualisation")
        
        auto_refresh = st.checkbox("Auto-refresh (30s)", value=False, key="auto_refresh_toggle")
        if auto_refresh:
            # Countdown visuel (version simplifi√©e pour √©viter les blocages)
            st.info("‚è±Ô∏è Auto-refresh activ√©")
            time.sleep(30)
            st.cache_data.clear()
            st.rerun()
        
        # Statut syst√®me
        st.markdown("---")
        current_time = datetime.now()
        st.success(f"üü¢ **Syst√®me Op√©rationnel**")
        st.info(f"üïê {current_time.strftime('%H:%M:%S')}")
        st.info(f"üìÖ {current_time.strftime('%d/%m/%Y')}")
        
        # Alertes sidebar
        if urgent_sensors_count > 0:
            st.error(f"üö® {urgent_sensors_count} capteurs urgents!")
        elif warning_sensors_count > 5:
            st.warning(f"‚ö†Ô∏è {warning_sensors_count} capteurs √† surveiller")
        else:
            st.success("‚úÖ Situation normale")
    
    # Utilisation des variables locales mise √† jour
    current_view_mode = view_mode
    current_alert_threshold = alert_threshold
    
    # Calcul des m√©triques de d√©cision (apr√®s le chargement des donn√©es)
    decision_metrics = create_decision_metrics(fill_levels, df_positions, df_tonnage)
    
    # G√©n√©rer les recommandations
    recommendations = generate_operational_recommendations(fill_levels, df_positions, df_tonnage)
    
    # Panel de recommandations (toujours visible en haut)
    if recommendations:
        st.subheader("üéØ Recommandations Op√©rationnelles")
        for rec in recommendations[:3]:  # Top 3 recommandations
            if rec['type'] == 'URGENT':
                st.error(f"üö® **{rec['title']}** - {rec['description']} ‚Üí *{rec['action']}*")
            elif rec['type'] == 'WARNING':
                st.warning(f"‚ö†Ô∏è **{rec['title']}** - {rec['description']} ‚Üí *{rec['action']}*")
            else:
                st.info(f"üí° **{rec['title']}** - {rec['description']} ‚Üí *{rec['action']}*")
    
    # M√©triques globales avec focus d√©cision
    st.subheader("üìà Tableau de Bord D√©cisionnel")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üî¥ Urgents", 
            decision_metrics['urgent_count'],
            delta=f"-{decision_metrics['urgent_count']} √† collecter" if decision_metrics['urgent_count'] > 0 else None
        )
    with col2:
        st.metric(
            "üü° Attention", 
            decision_metrics['warning_count'],
            delta="Surveillance requise" if decision_metrics['warning_count'] > 0 else None
        )
    with col3:
        st.metric(
            "‚ö° Capacit√© Utilis√©e", 
            f"{decision_metrics['capacity_used']:.1f}%",
            delta="Optimal < 70%" if decision_metrics['capacity_used'] > 70 else None
        )
    with col4:
        st.metric(
            "üí∞ Perte Potentielle", 
            f"{decision_metrics['potential_loss']:.0f}‚Ç¨",
            delta="Si d√©bordement" if decision_metrics['potential_loss'] > 0 else None
        )
    with col5:
        st.metric(
            "‚è∞ Temps Critique", 
            f"{decision_metrics['time_to_overflow']:.1f}h",
            delta="Avant d√©bordement" if decision_metrics['time_to_overflow'] < 6 else None
        )
    
    # Layout principal avec carte interactive
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üó∫Ô∏è Carte Interactive - Cliquez pour s√©lectionner")
        
        # Filtrage selon le mode de vue
        if view_mode == 'urgent_only':
            display_sensors = [i for i, level in enumerate(fill_levels) if level >= alert_threshold]
            st.info(f"üéØ Mode Focus: {len(display_sensors)} capteurs ‚â•{alert_threshold}%")
        else:
            display_sensors = list(range(len(fill_levels)))
        
        # Carte interactive
        map_fig = create_interactive_map(
            fill_levels, 
            df_positions, 
            st.session_state.selected_sensors,
            st.session_state.planned_route
        )
        
        # Affichage de la carte avec interaction simul√©e
        selected_point = st.plotly_chart(map_fig, use_container_width=True, key="main_map")
        
        # Simulation de s√©lection (dans un vrai d√©ploiement, utiliser streamlit-plotly-events)
        st.info("üí° **Simulation d'interaction:** Utilisez les boutons ci-dessous pour s√©lectionner des capteurs")
        
        # Boutons de s√©lection rapide
        col_sel1, col_sel2, col_sel3 = st.columns(3)
        with col_sel1:
            if st.button("üî¥ S√©lectionner Urgents"):
                urgent_sensors = [df_positions.iloc[i]['sensor_id'] for i, level in enumerate(fill_levels) if level >= 85]
                st.session_state.selected_sensors = urgent_sensors
                st.rerun()
        
        with col_sel2:
            if st.button("üü° S√©lectionner Attention"):
                warning_sensors = [df_positions.iloc[i]['sensor_id'] for i, level in enumerate(fill_levels) if 70 <= level < 85]
                st.session_state.selected_sensors = warning_sensors
                st.rerun()
        
        with col_sel3:
            if st.button("üéØ S√©lectionner Top 5"):
                top_sensors = sorted(enumerate(fill_levels), key=lambda x: x[1], reverse=True)[:5]
                top_sensor_ids = [df_positions.iloc[idx]['sensor_id'] for idx, level in top_sensors]
                st.session_state.selected_sensors = top_sensor_ids
                st.rerun()
    
    with col2:
        st.subheader("üéÆ Centre de Contr√¥le")
        
        # Optimisation de parcours avec feedback
        if st.session_state.selected_sensors:
            if st.button("üöõ Optimiser Parcours", key="optimize_route"):
                # Utiliser un container pour les r√©sultats qui persiste
                results_container = st.container()
                
                with results_container:
                    with st.spinner("üîÑ Calcul du parcours optimal avec distances routi√®res..."):
                        route, distance, time_est, route_geometries = calculate_route_optimization(
                            st.session_state.selected_sensors, 
                            df_positions
                        )
                        
                        # Sauvegarder les r√©sultats dans session_state
                        st.session_state.planned_route = route
                        st.session_state.route_geometries = route_geometries
                        st.session_state.view_mode = 'planned_route'
                        st.session_state.route_calculated = True  # Flag pour forcer la mise √† jour
                        
                        if route:
                            # Compter combien de routes utilisent l'API vs estimation
                            api_used_count = sum(1 for point in route if point.get('api_used', False))
                            
                            st.success("‚úÖ **Parcours optimis√© calcul√©!**")
                            
                            # M√©triques principales
                            col_route1, col_route2, col_route3 = st.columns(3)
                            with col_route1:
                                st.metric("üìè Distance Totale", f"{distance:.1f} km")
                            with col_route2:
                                st.metric("‚è±Ô∏è Temps Total", f"{time_est:.0f} min")
                            with col_route3:
                                st.metric("üí∞ Co√ªt Estim√©", f"{distance * 2:.0f}‚Ç¨")
                            
                            # Indicateur de qualit√© du routing
                            if api_used_count == len(route):
                                st.success(f"üõ£Ô∏è **Routes calcul√©es avec pr√©cision** (facteur route urbaine appliqu√©)")
                            else:
                                st.info(f"üìè **Routes estim√©es** avec correction urbaine (+30%)")
                            
                            # D√©tail du parcours
                            with st.expander("üó∫Ô∏è D√©tail du Parcours Optimis√©", expanded=True):
                                st.write("**Ordre de collecte optimal:**")
                                for i, point in enumerate(route):
                                    sensor_idx = int(point['sensor_id'][1:]) - 1
                                    level = fill_levels[sensor_idx] if sensor_idx < len(fill_levels) else 0
                                    distance_info = f" ‚Üí {point.get('real_distance', 0):.1f}km"
                                    duration_info = f" ({point.get('real_duration', 0):.0f}min)"
                                    st.write(f"**{i+1}.** {point['sensor_id']} - Niveau: {level}% {distance_info}{duration_info}")
                                
                                # R√©sum√© final
                                st.info(f"üìç **R√©sum√©:** {len(route)} collectes ‚Üí Distance: {distance:.1f}km ‚Üí Temps: {time_est:.0f}min ‚Üí Co√ªt: {distance * 2:.0f}‚Ç¨")
                            
                            # Forcer la mise √† jour de la carte
                            st.info("üó∫Ô∏è **Carte mise √† jour avec le nouveau parcours - Regardez la ligne bleue !**")
                        else:
                            st.error("‚ùå Impossible de calculer le parcours")
                
                # Forcer le rerun pour mettre √† jour la carte
                st.rerun()
        
        # Afficher les r√©sultats existants s'il y en a (apr√®s rerun)
        elif st.session_state.planned_route:
            st.info("üìã **Parcours d√©j√† calcul√©** - Voir la carte pour la route")
            
            # Recalculer les m√©triques pour affichage
            total_distance = sum(point.get('real_distance', 0) for point in st.session_state.planned_route)
            total_time = sum(point.get('real_duration', 0) for point in st.session_state.planned_route) + (len(st.session_state.planned_route) * 5)
            
            col_route1, col_route2, col_route3 = st.columns(3)
            with col_route1:
                st.metric("üìè Distance", f"{total_distance:.1f} km")
            with col_route2:
                st.metric("‚è±Ô∏è Temps", f"{total_time:.0f} min")
            with col_route3:
                st.metric("üí∞ Co√ªt", f"{total_distance * 2:.0f}‚Ç¨")
            
            with st.expander("üó∫Ô∏è D√©tail du Parcours Actuel", expanded=False):
                for i, point in enumerate(st.session_state.planned_route):
                    sensor_idx = int(point['sensor_id'][1:]) - 1
                    level = fill_levels[sensor_idx] if sensor_idx < len(fill_levels) else 0
                    distance_info = f" ‚Üí {point.get('real_distance', 0):.1f}km"
                    duration_info = f" ({point.get('real_duration', 0):.0f}min)"
                    st.write(f"**{i+1}.** {point['sensor_id']} - Niveau: {level}% {distance_info}{duration_info}")
                
            if st.button("üîÑ Recalculer Parcours", key="recalc_route"):
                st.session_state.planned_route = []
                st.session_state.route_geometries = []
                st.rerun()
        
        else:
            if st.button("üöõ Optimiser Parcours", key="optimize_route"):
                # Utiliser un container pour les r√©sultats qui persiste
                results_container = st.container()
                
                with results_container:
                    with st.spinner("üîÑ Calcul du parcours optimal avec distances routi√®res..."):
                        route, distance, time_est, route_geometries = calculate_route_optimization(
                            st.session_state.selected_sensors, 
                            df_positions
                        )
                        
                        # Sauvegarder les r√©sultats dans session_state
                        st.session_state.planned_route = route
                        st.session_state.route_geometries = route_geometries
                        st.session_state.view_mode = 'planned_route'
                        st.session_state.route_calculated = True  # Flag pour forcer la mise √† jour
                        
                        if route:
                            # Compter combien de routes utilisent l'API vs estimation
                            api_used_count = sum(1 for point in route if point.get('api_used', False))
                            
                            st.success("‚úÖ **Parcours optimis√© calcul√©!**")
                            
                            # M√©triques principales
                            col_route1, col_route2, col_route3 = st.columns(3)
                            with col_route1:
                                st.metric("üìè Distance Totale", f"{distance:.1f} km")
                            with col_route2:
                                st.metric("‚è±Ô∏è Temps Total", f"{time_est:.0f} min")
                            with col_route3:
                                st.metric("üí∞ Co√ªt Estim√©", f"{distance * 2:.0f}‚Ç¨")
                            
                            # Indicateur de qualit√© du routing
                            if api_used_count == len(route):
                                st.success(f"üõ£Ô∏è **Routes calcul√©es avec pr√©cision** (facteur route urbaine appliqu√©)")
                            else:
                                st.info(f"üìè **Routes estim√©es** avec correction urbaine (+30%)")
                            
                            # D√©tail du parcours
                            with st.expander("üó∫Ô∏è D√©tail du Parcours Optimis√©", expanded=True):
                                st.write("**Ordre de collecte optimal:**")
                                for i, point in enumerate(route):
                                    sensor_idx = int(point['sensor_id'][1:]) - 1
                                    level = fill_levels[sensor_idx] if sensor_idx < len(fill_levels) else 0
                                    distance_info = f" ‚Üí {point.get('real_distance', 0):.1f}km"
                                    duration_info = f" ({point.get('real_duration', 0):.0f}min)"
                                    st.write(f"**{i+1}.** {point['sensor_id']} - Niveau: {level}% {distance_info}{duration_info}")
                                
                                # R√©sum√© final
                                st.info(f"üìç **R√©sum√©:** {len(route)} collectes ‚Üí Distance: {distance:.1f}km ‚Üí Temps: {time_est:.0f}min ‚Üí Co√ªt: {distance * 2:.0f}‚Ç¨")
                            
                            # Forcer la mise √† jour de la carte
                            st.info("üó∫Ô∏è **Carte mise √† jour avec le nouveau parcours - Regardez la ligne bleue !**")
                        else:
                            st.error("‚ùå Impossible de calculer le parcours")
                
                # Forcer le rerun pour mettre √† jour la carte
                st.rerun()
            
            # Simulation de collecte avec confirmation
            st.write("---")
            st.write("**üóëÔ∏è Simulation de Collecte:**")
            
            # V√©rifier si on attend une confirmation
            if not st.session_state.awaiting_confirmation:
                # Bouton initial pour d√©clencher la demande de confirmation
                if st.button("‚ö†Ô∏è Simuler Collecte Compl√®te", key="simulate_collection"):
                    # Calculer les d√©tails de la collecte
                    total_sensors = len(st.session_state.selected_sensors)
                    estimated_time = total_sensors * 5  # 5 min par capteur
                    
                    if st.session_state.planned_route and len(st.session_state.planned_route) > 0:
                        # R√©cup√©rer la distance d√©j√† calcul√©e depuis la route
                        total_distance = sum(point.get('real_distance', 0) for point in st.session_state.planned_route)
                        estimated_cost = total_distance * 2
                    else:
                        estimated_cost = total_sensors * 10
                    
                    # Stocker les d√©tails et activer l'√©tat de confirmation
                    st.session_state.confirmation_details = {
                        'total_sensors': total_sensors,
                        'estimated_time': estimated_time,
                        'estimated_cost': estimated_cost
                    }
                    st.session_state.awaiting_confirmation = True
                    st.rerun()
            
            else:
                # Afficher la demande de confirmation
                details = st.session_state.confirmation_details
                st.warning(f"‚ö†Ô∏è **Confirmer la collecte de {details['total_sensors']} capteurs?**")
                
                col_details1, col_details2 = st.columns(2)
                with col_details1:
                    st.write(f"‚è±Ô∏è **Dur√©e estim√©e:** {details['estimated_time']} min")
                with col_details2:
                    st.write(f"üí∞ **Co√ªt estim√©:** {details['estimated_cost']:.0f}‚Ç¨")
                
                col_conf1, col_conf2 = st.columns(2)
                
                with col_conf1:
                    if st.button("‚úÖ Confirmer", key="confirm_collection"):
                        # Enregistrer l'action
                        st.session_state.last_action = {
                            'type': 'collection',
                            'sensors': st.session_state.selected_sensors.copy(),
                            'time': datetime.now(),
                            'estimated_time': details['estimated_time'],
                            'estimated_cost': details['estimated_cost']
                        }
                        
                        # Afficher le succ√®s
                        st.success(f"‚úÖ **Collecte confirm√©e!** {details['total_sensors']} capteurs vid√©s")
                        st.balloons()  # Animation de succ√®s
                        
                        # Reset de la s√©lection et de l'√©tat de confirmation
                        st.session_state.selected_sensors = []
                        st.session_state.planned_route = []
                        st.session_state.route_geometries = []
                        st.session_state.view_mode = 'all'
                        st.session_state.awaiting_confirmation = False
                        st.session_state.confirmation_details = None
                        
                        # Attendre un peu pour voir l'animation
                        time.sleep(2)
                        st.rerun()
                
                with col_conf2:
                    if st.button("‚ùå Annuler", key="cancel_collection"):
                        # Annuler la confirmation
                        st.session_state.awaiting_confirmation = False
                        st.session_state.confirmation_details = None
                        st.info("‚ùå Collecte annul√©e")
                        st.rerun()
        
        # Historique des actions avec plus de d√©tails
        if st.session_state.last_action:
            st.write("---")
            st.write("**üìù Derni√®re Action Effectu√©e:**")
            action = st.session_state.last_action
            
            col_hist1, col_hist2 = st.columns(2)
            with col_hist1:
                st.write(f"üïê **Heure:** {action['time'].strftime('%H:%M:%S')}")
                st.write(f"üéØ **Action:** {action['type'].title()}")
                st.write(f"üìä **Capteurs:** {len(action['sensors'])}")
            
            with col_hist2:
                if 'estimated_time' in action:
                    st.write(f"‚è±Ô∏è **Dur√©e:** {action['estimated_time']} min")
                if 'estimated_cost' in action:
                    st.write(f"üí∞ **Co√ªt:** {action['estimated_cost']:.0f}‚Ç¨")
                
            # Bouton pour voir les d√©tails
            if st.button("üîç Voir d√©tails", key="action_details"):
                st.write("**Capteurs trait√©s:**")
                for sensor_id in action['sensors']:
                    st.write(f"- {sensor_id}")
        
        # Aide contextuelle
        with st.expander("üí° Aide - Comment utiliser les contr√¥les", expanded=False):
            st.markdown("""
            **üéØ S√©lection de capteurs:**
            - Utilisez les boutons rapides (Urgents, Attention, Top 5)
            - S√©lection individuelle avec la liste d√©roulante
            - Seuil personnalis√© avec le slider
            
            **üöõ Planification de parcours:**
            1. S√©lectionnez des capteurs
            2. Cliquez "Optimiser Parcours"
            3. V√©rifiez l'ordre et les estimations
            4. Confirmez la collecte
            
            **üëÅÔ∏è Modes d'affichage:**
            - **Vue compl√®te:** Tous les capteurs
            - **Urgences seulement:** Focus sur les priorit√©s
            - **Parcours planifi√©:** Voir le trajet optimis√©
            """)
    
    # Section d√©tails des capteurs s√©lectionn√©s
    if st.session_state.selected_sensors:
        st.subheader("üîç Analyse D√©taill√©e des Capteurs")
        
        # Tabs pour chaque capteur s√©lectionn√©
        if len(st.session_state.selected_sensors) == 1:
            create_sensor_details_panel(
                st.session_state.selected_sensors[0], 
                fill_levels, 
                df_positions, 
                df_historic
            )
        else:
            tabs = st.tabs([f"üìä {sensor_id}" for sensor_id in st.session_state.selected_sensors[:5]])  # Max 5 tabs
            for i, sensor_id in enumerate(st.session_state.selected_sensors[:5]):
                with tabs[i]:
                    create_sensor_details_panel(sensor_id, fill_levels, df_positions, df_historic)
    
    # M√©triques ML et performance syst√®me
    st.subheader("ü§ñ Performance & Monitoring")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        if metrics:
            # M√©triques ML
            col_ml1, col_ml2, col_ml3, col_ml4 = st.columns(4)
            with col_ml1:
                st.metric("RMSE", f"{metrics.get('rmse', 0):.3f}")
            with col_ml2:
                st.metric("MAE", f"{metrics.get('mae', 0):.3f}")
            with col_ml3:
                st.metric("R¬≤", f"{metrics.get('r2', 0):.3f}")
            with col_ml4:
                if metrics.get('timestamp'):
                    try:
                        ts_str = metrics['timestamp']
                        if len(ts_str) == 16 and 'T' in ts_str and ts_str.endswith('Z'):
                            date_part = ts_str[:8]
                            time_part = ts_str[9:15]
                            formatted_ts = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]} {time_part[:2]}:{time_part[2:4]}:{time_part[4:6]}"
                            ts = datetime.strptime(formatted_ts, '%Y-%m-%d %H:%M:%S')
                            st.metric("Derni√®re MAJ ML", ts.strftime('%H:%M:%S'))
                        else:
                            st.metric("Derni√®re MAJ ML", ts_str[-8:] if len(ts_str) > 8 else ts_str)
                    except Exception:
                        st.metric("Derni√®re MAJ ML", metrics['timestamp'])
        else:
            st.info("‚è≥ M√©triques ML en cours de calcul...")
    
    with col2:
        # Indicateurs de performance syst√®me
        st.write("**‚ö° Performances Syst√®me**")
        st.write(f"üìä Capteurs actifs: {len(fill_levels)}")
        st.write(f"üîÑ Fr√©quence: 30s")
        st.write(f"üíæ Cache: Actif")
        st.write(f"üåê Statut: üü¢ Op√©rationnel")

if __name__ == "__main__":
    main()